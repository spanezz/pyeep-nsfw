#!/usr/bin/python3

import argparse
import asyncio
import random
import sys
from typing import Generator

from stim.stim import Stim
from stim.pattern import (ChaosPulses, Pattern, PatternSequence, Pulses,
                          Silence, Wave, WavyWave)
from stim.player import Player, WaveWriter


class PulseWaveEscalateBase(PatternSequence):
    PULSE_VOLUME = 0.9
    WAVE_VOLUME = 1
    MIN_DURATION = 0
    # MIN_DURATION = 20
    START = 1
    START = 20

    def duration_pattern(self) -> Generator[float, None, None]:
        yield from range(self.START, 20)
        for i in range(20, 30):
            yield i
            yield i
        while True:
            yield 30

    def freq_pattern(self) -> Generator[float, None, None]:
        while True:
            yield random.choice([1000, 2000, 5000])


class PulseWaveEscalate(PulseWaveEscalateBase):
    PULSE_VOLUME = 0.9
    WAVE_VOLUME = 0.95

    def __init__(self):
        super().__init__("pulse wave escalate")

    def on_heartbeat_sample(self):
        e = self.player.excitement

        if e.interesting:
            for idx in range(len(self.player.channels)):
                # print("things are getting interesting!")
                pattern = WavyWave(volume_min=0.95, volume_max=1.0, volume_freq=0.5, freq=2000, duration=15.0)
                # pattern = Silence(duration=2.0)
                self.player.set_override(self.channel_name, pattern)

    def patterns(self) -> Generator[Pattern, None, None]:
        # TODO: implement adding an override pattern in the player, which gets
        # played instead of the current one, with the current one getting
        # paused.
        # With a callback from the heart rate monitor, enqueue override
        # patterns in case things get interesting
        for i, f in zip(self.duration_pattern(), self.freq_pattern()):
            yield Pulses(count=i * 2, duration=0.1, freq=f, volume=self.PULSE_VOLUME, gap=5.0/100.0)
            yield WavyWave(
                    volume_min=self.WAVE_VOLUME * 0.93, volume_max=self.WAVE_VOLUME, volume_freq=3,
                    duration=self.MIN_DURATION + i / 2, freq=f)
            yield Silence(duration=5.0/100.0)


class PulseWaveEscalateChaotic(PulseWaveEscalateBase):
    FREQ = 1000

    def __init__(self):
        super().__init__("pulse wave escalate with chaotic pulses")

    def patterns(self) -> Generator[Pattern, None, None]:
        for i, f in zip(self.duration_pattern(), self.freq_pattern()):
            yield ChaosPulses(count=i * 2, duration=(0.1, 0.3), freq=(200, 5000), volume=(0.7, 1, 1), gap=5.0/100.0)
            yield Wave(volume=self.WAVE_VOLUME, duration=self.MIN_DURATION + i / 2, freq=self.FREQ)
            yield Silence(duration=5.0/100.0)


class PulseWaveEscalate2(PulseWaveEscalateBase):
    FREQ = 1000
    PULSE_VOLUME = 1.0

    def __init__(self):
        super().__init__("pulse wave escalate 2")

    def patterns(self) -> Generator[Pattern, None, None]:
        for i in self.duration_pattern():
            yield Pulses(count=i * 2, duration=0.6, freq=self.FREQ, volume=self.PULSE_VOLUME, gap=10.0/100.0)
            yield Wave(volume=self.WAVE_VOLUME, duration=i, freq=self.FREQ)
            yield Silence(duration=5.0/100.0)


class VolumeSwing(PatternSequence):
    def __init__(self):
        super().__init__("frequency swing")

    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            for volume in range(50, 100, 5):
                yield Wave(volume=volume / 100.0, duration=0.1, freq=220)
            yield Wave(volume=1, duration=5, freq=220)
            for volume in range(100, 50, -5):
                yield Wave(volume=volume / 100.0, duration=0.1, freq=220)
            yield Wave(volume=0.5, duration=2, freq=220)


class FrequencyDifference(PatternSequence):
    def __init__(self):
        super().__init__("frequency swing")

    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            # yield Wave(volume=1.0, duration=1, freq=200)
            yield Wave(volume=1.0, duration=1, freq=1000)


class Caress(PatternSequence):
    FREQ = 1000

    def __init__(self):
        super().__init__("caress")

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.5, freq=self.FREQ)
        peak_size = 1
        while True:
            for i in range(60, 100):
                yield Wave(volume=i / 100.0, duration=i / 1000.0, freq=self.FREQ)
            yield Wave(volume=1, duration=peak_size, freq=self.FREQ)
            peak_size = min(peak_size + 1, 10)
            for i in range(100, 60, -3):
                yield Wave(volume=i / 100.0, duration=i / 1000.0, freq=self.FREQ)


class Calibrate(PatternSequence):
    FREQ = 1000.0

    def __init__(self):
        super().__init__("calibration tune")

    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            yield Wave(volume=1.0, duration=10, freq=self.FREQ)


class FrequencySwing(PatternSequence):
    def __init__(self):
        super().__init__("frequency swing")

    def patterns(self) -> Generator[Pattern, None, None]:
        for freq in range(50, 1000, 100):
            yield Wave(volume=1.0, duration=1, freq=freq)


class RandomPulseWave(PatternSequence):
    def __init__(self):
        super().__init__("random")

    def patterns(self) -> Generator[Pattern, None, None]:
        import random
        while True:
            yield Pulses(count=random.randrange(2, 20), duration=0.1, freq=200.0, volume=0.9, gap=5.0/100.0)
            yield Wave(volume=1.0, duration=random.randrange(1, 15) / 2.0, freq=220.0)
            yield Silence(duration=5.0/100.0)


class NumberSequencePulseWave(PatternSequence):
    FREQ = 1000

    def __init__(self, number: str):
        super().__init__(f"random {number}")
        self.number = number

    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            for val in [int(n) for n in self.number]:
                yield Pulses(count=val, duration=0.1, freq=self.FREQ, volume=0.9, gap=5.0/100.0)
                yield Wave(volume=1.0, duration=val, freq=self.FREQ)
                yield Silence(duration=5.0/100.0)


class RandomPauseWave(PatternSequence):
    FREQ = 1000

    def __init__(self):
        super().__init__("wave with random pause")

    def patterns(self) -> Generator[Pattern, None, None]:
        import random
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            yield Wave(volume=1.0, duration=random.randrange(1, 10), freq=self.FREQ)
            yield Silence(duration=random.uniform(3.0/10.0, 1))


class HeartBeat(PatternSequence):
    FREQ = 1000

    def __init__(self, stim: Stim):
        super().__init__("sync pulses with heart beat")
        self.stim = stim

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            if self.stim.excitement is None:
                yield Silence(duration=0.2)
            else:
                rate = self.stim.excitement.last_rate
                pause = 3.0/10.0
                duration = 60.0 / rate
                yield Wave(volume=1.0, freq=self.FREQ, duration=duration - pause)
                yield Silence(duration=pause)


class HeartBeat1(PatternSequence):
    FREQ = 1000

    def __init__(self, stim: Stim):
        super().__init__("sync pulses with heart beat variation")
        self.stim = stim

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            if (e := self.stim.excitement) is None:
                yield Silence(duration=0.2)
            else:
                pause = 3.0 / 10.0
                volume = 1.0

                if e.last_slope > 0:
                    duration = 1
                    pause = 0
                elif e.last_slope == 0:
                    duration = 2
                else:
                    duration = 60.0 / e.last_rate * 2
                    volume = 0.9

                # duration = math.asin(val_norm * 2 - 1) + math.pi / 2 + 1

                # duration = val_norm ** 2 * 2 + 1

                # duration = 3 - val_norm ** 2 * 2.5

                # duration = val_norm ** 2 * 2.5 + 0.5

                # if val_norm < 0.5:
                #     duration = 60.0 / self.stim.heart_last
                # else:
                #     duration = 60.0 / self.stim.heart_last
                #     duration *= ((val_norm + 0.5) * 3) ** 2
                yield Wave(volume=volume, freq=self.FREQ, duration=duration - pause)
                if pause:
                    yield Silence(duration=pause)


class HeartBeatFrustration(PatternSequence):
    FREQ = 1000

    def __init__(self, stim: Stim):
        super().__init__("sync pulses with heart beat variation")
        self.stim = stim

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            duration = 1.0

            if (e := self.stim.excitement) is None:
                yield Silence(duration=0.2)
                continue

            if e.interesting:
                yield Silence(duration=0.3)
                continue

            if e.climbing:
                volume = 0.8
                pause = 0.4
                print("climbing", end=" ")
            elif e.falling:
                duration = 0.5
                volume = 1.0
                pause = 0
                print("falling", end=" ")
            elif e.coasting:
                volume = 1.0
                pause = 0.3
                print("coasting", end=" ")
            else:
                volume = 1.0
                pause = 0.3
                print("none?", end=" ")

            yield Wave(volume=volume, freq=self.FREQ, duration=duration - pause)
            if pause:
                yield Silence(duration=pause)


class HeartBeatStimulation(PatternSequence):
    FREQ = 1000

    def __init__(self, stim: Stim):
        super().__init__("sync pulses with heart beat variation")
        self.stim = stim
        self.last_volume = 0

    def set_volume(self, target: float, step: float = 0.1) -> float:
        if self.last_volume < target:
            self.last_volume = max(1, self.last_volume + step)
        elif self.last_volume > target:
            self.last_volume = min(target, self.last_volume - step)
        else:
            self.last_volume = target
        return self.last_volume

    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            if (e := self.stim.excitement) is None:
                yield Silence(duration=0.2)
                continue

            duration = 1.0
            if e.interesting:
                # TODO: increase gradually
                volume = self.set_volume(1.0)
                if volume < 1.0:
                    duration = 0.5
                else:
                    duration = 10
                pause = 0
                print("interesting", end=" ")
            elif e.climbing:
                volume = self.set_volume(0.85)
                duration = 0.5
                pause = 0
                print("climbing", end=" ")
            elif e.falling:
                volume = self.set_volume(0.6)
                duration = 1.0
                pause = 0.3
                print("falling", end=" ")
            elif e.coasting:
                # TODO: volume variations/modulations in the pulse
                volume = self.set_volume(0.7)
                duration = 1.0
                pause = 0.3
                print("coasting", end=" ")
            else:
                volume = 0.7
                pause = 0.3
                print("none?", end=" ")

            yield WavyWave(volume_min=volume - 0.1, volume_max=volume, freq=self.FREQ, duration=duration - pause)
            if pause:
                yield Silence(duration=pause)


class App:
    def __init__(self, args: argparse.Namespace):
        self.args = args
        if self.args.output:
            self.player = WaveWriter(args.output)
        else:
            self.player = Stim()

    async def calibrate(self):
        self.player.start_mono(Calibrate())
        await self.player.loop()

    async def stim(self):
        if self.args.heart:
            self.player.heartbeat_socket = self.args.heart

        await self.player.loop()

    def main(self):
        try:
            if self.args.calibrate:
                asyncio.run(self.calibrate())
            else:
                # player.start_mono(HeartBeatStimulation(player))
                # player.start_mono(HeartBeatFrustration(player))
                self.player.start_mono(PulseWaveEscalate())
                # player.start_mono(PulseWaveEscalateChaotic())
                # player.start_stereo(
                #         left=PulseWaveEscalate(),
                #         # left=PulseWaveEscalateChaotic(),
                #         # left=RandomPauseWave(),
                #         # right=RandomPauseWave())
                #         # right=FrequencySwing())
                #         right=PulseWaveEscalateChaotic())
                # player.start_mono(PulseWaveEscalate2())
                # player.start_mono(FrequencySwing())
                # player.start_mono(FrequencyDifference())
                # player.start_mono(Caress())
                # player.start_mono(RandomPulseWave())
                # player.start_mono(RandomPauseWave())
                # player.start_mono(NumberSequencePulseWave("1234124312"))
                # player.start_stereo(left=FrequencySwing(), right=FrequencySwing())
                # player.start_stereo(
                #         left=PulseWaveEscalate(),
                #         right=VolumeSwing(),
                # )
                asyncio.run(self.stim())
            print("AMAIN END")
        except KeyboardInterrupt:
            print("Shutting down...")
        finally:
            print("CLEANUP")
            self.player.shutdown()


def main():
    # TODO: allow to use a function for intensity
    # TODO: implement a slow start

    parser = argparse.ArgumentParser(description="Tone pattern generator")
    parser.add_argument("-o", "--output", action="store", metavar="file.wav",
                        help="write the generated audio to the given file instead of playing it")
    parser.add_argument("-c", "--calibrate", action="store_true",
                        help="play a constant full volume calibration sound")
    parser.add_argument("--heart", metavar="socket", action="store",
                        help="UNIX socket to use to listen for heartbeat")
    args = parser.parse_args()

    app = App(args)
    app.main()


if __name__ == "__main__":
    sys.exit(main())
