#!/usr/bin/python3

# TODO: pass a Volume object instead of int for non-constant volumes
# TODO: do the same for waveforms?
# TODO: Excitement: method to return the last current Slope (which of the
#       current slopes has the most recent start time)
# TODO: make a pattern which is ok for listening. Use the heart rhythm for
#       pulse. Use increasing or decreasing volume in pulses to mark when we
#       are in a climb or fall slope. Use a different pattern to mark
#       interesting moments


import argparse
import asyncio
import math
import random
import sys
from typing import Generator, Optional

from stim import volume
from stim.heart import Excitement
from stim.pattern import (ChaosPulses, Pattern, PatternSequence, Pulses,
                          Silence, Wave)
from stim.player import WaveWriter
from stim.stim import Stim


class PulseWaveEscalateBase(PatternSequence):
    PULSE_VOLUME = 0.9
    WAVE_VOLUME = 1
    MIN_DURATION = 0
    # MIN_DURATION = 20
    START = 1
    # START = 20

    def duration_pattern(self) -> Generator[float, None, None]:
        yield from range(self.START, 20)
        for i in range(20, 30):
            yield i
            yield i
        while True:
            yield 30

    def freq_pattern(self) -> Generator[float, None, None]:
        while True:
            yield random.choice([1000, 2000, 5000])


class TeaseAndDenial(PatternSequence):
    """
    Tease and denial
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=volume.Sine(vmin=0.8, vmax=1.0, freq=8), freq=2000, duration=2.0)
        # yield Wave(volume=1.0, freq=2000, duration=5.0)
        # yield WavyWave(volume_min=0.95, volume_max=1.0, volume_freq=0.5, freq=2000, duration=2.0)
        # yield Silence(duration=3.0)
        # Longer is more interesting but needs a gradual increase of volume when restarting
        # yield Silence(duration=4.0)


class TeaseAndDenialMixin(PatternSequence):
    def on_heartbeat_sample(self, excitement: Excitement):
        super().on_heartbeat_sample(excitement)
        e = excitement
        if e.interesting:
            for idx in range(len(self.player.channels)):
                # print("things are getting interesting!")
                # pattern = Wave(volume=1.0, freq=2000, duration=10.0)
                # pattern = WavyWave(volume_min=0.95, volume_max=1.0, volume_freq=0.5, freq=2000, duration=15.0)
                pattern = TeaseAndDenial()
                self.player.set_override(self.channel_name, pattern)


class PulseWaveEscalate(TeaseAndDenialMixin, PulseWaveEscalateBase):
    """
    Pulse wave escalate
    """
    PULSE_VOLUME = 0.9
    WAVE_VOLUME = 0.95

    def patterns(self) -> Generator[Pattern, None, None]:
        # TODO: implement adding an override pattern in the player, which gets
        # played instead of the current one, with the current one getting
        # paused.
        # With a callback from the heart rate monitor, enqueue override
        # patterns in case things get interesting
        for i, f in zip(self.duration_pattern(), self.freq_pattern()):
            yield Pulses(count=i * 2, duration=0.1, freq=f, volume=self.PULSE_VOLUME, gap=5.0/100.0)
            yield Wave(
                    volume=volume.Sine(vmin=self.WAVE_VOLUME * 0.93, vmax=self.WAVE_VOLUME, freq=3),
                    duration=self.MIN_DURATION + i / 2, freq=f)
            yield Silence(duration=5.0/100.0)


class PulseWaveEscalateChaotic(PulseWaveEscalateBase):
    """
    Pulse wave escalate with chaotic pulses
    """
    FREQ = 1000

    def patterns(self) -> Generator[Pattern, None, None]:
        for i, f in zip(self.duration_pattern(), self.freq_pattern()):
            yield ChaosPulses(count=i * 2, duration=(0.1, 0.3), freq=(200, 5000), volume=(0.7, 1, 1), gap=5.0/100.0)
            yield Wave(volume=self.WAVE_VOLUME, duration=self.MIN_DURATION + i / 2, freq=self.FREQ)
            yield Silence(duration=5.0/100.0)


class PulseWaveEscalate2(PulseWaveEscalateBase):
    """
    Pulse wave escalate 2
    """
    FREQ = 1000
    PULSE_VOLUME = 1.0

    def patterns(self) -> Generator[Pattern, None, None]:
        for i in self.duration_pattern():
            yield Pulses(count=i * 2, duration=0.6, freq=self.FREQ, volume=self.PULSE_VOLUME, gap=10.0/100.0)
            yield Wave(volume=self.WAVE_VOLUME, duration=i, freq=self.FREQ)
            yield Silence(duration=5.0/100.0)


class VolumeSwing(PatternSequence):
    """
    Volume swing
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            for vol in range(50, 100, 5):
                yield Wave(volume=vol / 100.0, duration=0.1, freq=220)
            yield Wave(volume=1, duration=5, freq=220)
            for vol in range(100, 50, -5):
                yield Wave(volume=vol / 100.0, duration=0.1, freq=220)
            yield Wave(volume=0.5, duration=2, freq=220)


class FrequencyDifference(PatternSequence):
    """
    Frequency difference
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            # yield Wave(volume=1.0, duration=1, freq=200)
            yield Wave(volume=1.0, duration=1, freq=1000)


class Caress(PatternSequence):
    """
    Caress
    """
    FREQ = 1000

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.5, freq=self.FREQ)
        peak_size = 1
        while True:
            for i in range(60, 100):
                yield Wave(volume=i / 100.0, duration=i / 1000.0, freq=self.FREQ)
            yield Wave(volume=1, duration=peak_size, freq=self.FREQ)
            peak_size = min(peak_size + 1, 10)
            for i in range(100, 60, -3):
                yield Wave(volume=i / 100.0, duration=i / 1000.0, freq=self.FREQ)


class Calibrate(PatternSequence):
    """
    Calibration tune
    """
    FREQ = 1000.0

    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            yield Wave(volume=1.0, duration=10, freq=self.FREQ)


class FrequencySwing(PatternSequence):
    """
    Frequency swing
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        for freq in range(50, 1000, 100):
            yield Wave(volume=1.0, duration=1, freq=freq)


class RandomPulseWave(PatternSequence):
    def __init__(self):
        super().__init__("random")

    def patterns(self) -> Generator[Pattern, None, None]:
        import random
        while True:
            yield Pulses(count=random.randrange(2, 20), duration=0.1, freq=200.0, volume=0.9, gap=5.0/100.0)
            yield Wave(volume=1.0, duration=random.randrange(1, 15) / 2.0, freq=220.0)
            yield Silence(duration=5.0/100.0)


class NumberSequencePulseWave(PatternSequence):
    FREQ = 1000

    def __init__(self, number: str):
        super().__init__(f"random {number}")
        self.number = number

    def patterns(self) -> Generator[Pattern, None, None]:
        while True:
            for val in [int(n) for n in self.number]:
                yield Pulses(count=val, duration=0.1, freq=self.FREQ, volume=0.9, gap=5.0/100.0)
                yield Wave(volume=1.0, duration=val, freq=self.FREQ)
                yield Silence(duration=5.0/100.0)


class RandomPauseWave(PatternSequence):
    """
    Wave with random pause
    """
    FREQ = 1000

    def patterns(self) -> Generator[Pattern, None, None]:
        import random
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            yield Wave(volume=1.0, duration=random.randrange(1, 10), freq=self.FREQ)
            yield Silence(duration=random.uniform(3.0/10.0, 1))


class ContinuousHeartMonitorMixin:
    """
    Mixin for patterns that continuously take decisions based on heart rate
    """
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.excitement: Optional[Excitement] = None

    def on_heartbeat_sample(self, excitement: Excitement):
        self.excitement = excitement


class HeartBeat(ContinuousHeartMonitorMixin, PatternSequence):
    """
    Sync pulses with heart beat
    """
    FREQ = 1000

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            if self.excitement is None:
                yield Silence(duration=0.2)
                continue

            rate = self.excitement.last_rate
            pause = 3.0/10.0
            duration = 60.0 / rate
            yield Wave(volume=1.0, freq=self.FREQ, duration=duration - pause)
            yield Silence(duration=pause)


class HeartBeatProportional(TeaseAndDenialMixin, ContinuousHeartMonitorMixin, PatternSequence):
    """
    Sync pulse duration with speed of heart beat
    """
    FREQ = 1000

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        rate_min = None
        while True:
            if self.excitement is None:
                yield Silence(duration=0.2)
                continue

            rate = self.excitement.last_rate
            if rate_min is None or rate_min > rate:
                rate_min = rate
            pause = 0.5
            duration = math.log(1.5 + rate - rate_min) * 2
            yield Wave(
                    # volume=volume.Sine(vmin=0.9, vmax=1.0, freq=60/rate),
                    volume=volume.RampUp(vmin=0.5, vmax=1.0),
                    freq=self.FREQ, duration=duration - pause)
            yield Silence(duration=pause)


class HeartBeat1(ContinuousHeartMonitorMixin, PatternSequence):
    """
    sync pulses with heart beat variation
    """
    FREQ = 1000

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            if (e := self.excitement) is None:
                yield Silence(duration=0.2)
                continue

            pause = 3.0 / 10.0
            volume = 1.0

            if e.last_slope > 0:
                duration = 1
                pause = 0
            elif e.last_slope == 0:
                duration = 2
            else:
                duration = 60.0 / e.last_rate * 2
                volume = 0.9

            # duration = math.asin(val_norm * 2 - 1) + math.pi / 2 + 1

            # duration = val_norm ** 2 * 2 + 1

            # duration = 3 - val_norm ** 2 * 2.5

            # duration = val_norm ** 2 * 2.5 + 0.5

            # if val_norm < 0.5:
            #     duration = 60.0 / self.stim.heart_last
            # else:
            #     duration = 60.0 / self.stim.heart_last
            #     duration *= ((val_norm + 0.5) * 3) ** 2
            yield Wave(volume=volume, freq=self.FREQ, duration=duration - pause)
            if pause:
                yield Silence(duration=pause)


class HeartBeatFrustration(ContinuousHeartMonitorMixin, PatternSequence):
    """
    Lower stimulation when excitement increases
    """
    FREQ = 1000

    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=0.3, duration=0.3, freq=self.FREQ)
        yield Wave(volume=0.6, duration=0.3, freq=self.FREQ)
        while True:
            duration = 1.0

            if (e := self.excitement) is None:
                yield Silence(duration=0.2)
                continue

            if e.interesting:
                yield Silence(duration=0.3)
                continue

            if e.climbing:
                volume = 0.8
                pause = 0.4
                print("climbing", end=" ")
            elif e.falling:
                duration = 0.5
                volume = 1.0
                pause = 0
                print("falling", end=" ")
            elif e.coasting:
                volume = 1.0
                pause = 0.3
                print("coasting", end=" ")
            else:
                volume = 1.0
                pause = 0.3
                print("none?", end=" ")

            yield Wave(volume=volume, freq=self.FREQ, duration=duration - pause)
            if pause:
                yield Silence(duration=pause)


class HeartBeatStimulation(ContinuousHeartMonitorMixin, PatternSequence):
    """
    Intensify stimulation when excitement increases
    """
    FREQ = 1000

    def set_volume(self, target: float, step: float = 0.1) -> float:
        if self.last_volume < target:
            self.last_volume = max(1, self.last_volume + step)
        elif self.last_volume > target:
            self.last_volume = min(target, self.last_volume - step)
        else:
            self.last_volume = target
        return self.last_volume

    def patterns(self) -> Generator[Pattern, None, None]:
        self.last_volume = 0
        while True:
            if (e := self.excitement) is None:
                yield Silence(duration=0.2)
                continue

            duration = 1.0
            if e.interesting:
                # TODO: increase gradually
                volume = self.set_volume(1.0)
                if volume < 1.0:
                    duration = 0.5
                else:
                    duration = 10
                pause = 0
                print("interesting", end=" ")
            elif e.climbing:
                volume = self.set_volume(0.9)
                duration = 0.5
                pause = 0
                print("climbing", end=" ")
            elif e.falling:
                volume = self.set_volume(0.8)
                duration = 1.0
                pause = 0.3
                print("falling", end=" ")
            elif e.coasting:
                # TODO: volume variations/modulations in the pulse
                volume = self.set_volume(0.8)
                duration = 1.0
                pause = 0.3
                print("coasting", end=" ")
            else:
                volume = 0.8
                pause = 0.3
                print("none?", end=" ")

            yield Wave(
                    volume=volume.Sine(vmin=volume * 0.95, vmax=volume, freq=3),
                    freq=self.FREQ, duration=duration - pause)
            if pause:
                yield Silence(duration=pause)


class TestVolumeSlide(PatternSequence):
    """
    Frequency difference
    """
    def patterns(self) -> Generator[Pattern, None, None]:
        yield Wave(volume=volume.RampUp(0.0, 1.0), duration=1, freq=1000)
        yield Wave(volume=volume.Sine(0.5, 1.0, 5), duration=1, freq=1000)
        yield Wave(volume=volume.RampDown(0.0, 1.0), duration=1, freq=1000)


class App:
    def __init__(self, args: argparse.Namespace):
        self.args = args
        if self.args.output:
            self.player = WaveWriter(args.output)
        else:
            self.player = Stim()
        self.excitement: Optional[Excitement] = None

    def on_heartbeat_sample(self):
        for pattern in self.player.channels:
            pattern.on_heartbeat_sample(self.excitement)

    async def monitor_heartbeat(self):
        if self.args.heart is None:
            return

        self.excitement = Excitement(quiet=False)
        self.excitement.on_sample = self.on_heartbeat_sample
        await self.excitement.read_socket(self.args.heart)

    async def calibrate(self):
        self.player.start_mono(Calibrate())
        await self.player.loop()

    async def stim(self):
        await asyncio.gather(self.monitor_heartbeat(), self.player.loop())

    def main(self):
        try:
            if self.args.calibrate:
                asyncio.run(self.calibrate())
            else:
                # self.player.start_mono(HeartBeat())
                # self.player.start_mono(HeartBeatStimulation())
                # self.player.start_mono(HeartBeatFrustration())
                # self.player.start_mono(HeartBeatProportional())
                self.player.start_mono(TestVolumeSlide())
                # self.player.start_mono(PulseWaveEscalate())
                # player.start_mono(PulseWaveEscalateChaotic())
                # player.start_stereo(
                #         left=PulseWaveEscalate(),
                #         # left=PulseWaveEscalateChaotic(),
                #         # left=RandomPauseWave(),
                #         # right=RandomPauseWave())
                #         # right=FrequencySwing())
                #         right=PulseWaveEscalateChaotic())
                # player.start_mono(PulseWaveEscalate2())
                # player.start_mono(FrequencySwing())
                # player.start_mono(FrequencyDifference())
                # player.start_mono(Caress())
                # player.start_mono(RandomPulseWave())
                # player.start_mono(RandomPauseWave())
                # player.start_mono(NumberSequencePulseWave("1234124312"))
                # player.start_stereo(left=FrequencySwing(), right=FrequencySwing())
                # player.start_stereo(
                #         left=PulseWaveEscalate(),
                #         right=VolumeSwing(),
                # )
                asyncio.run(self.stim())
        except KeyboardInterrupt:
            print("Shutting down...")
        finally:
            self.player.shutdown()


def main():
    # TODO: allow to use a function for intensity
    # TODO: implement a slow start

    parser = argparse.ArgumentParser(description="Tone pattern generator")
    parser.add_argument("-o", "--output", action="store", metavar="file.wav",
                        help="write the generated audio to the given file instead of playing it")
    parser.add_argument("-c", "--calibrate", action="store_true",
                        help="play a constant full volume calibration sound")
    parser.add_argument("--heart", metavar="socket", action="store",
                        help="UNIX socket to use to listen for heartbeat")
    args = parser.parse_args()

    app = App(args)
    app.main()


if __name__ == "__main__":
    sys.exit(main())
