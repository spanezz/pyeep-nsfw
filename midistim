#!/usr/bin/python3

import argparse
import asyncio
import sys
import threading
from typing import NamedTuple

from pyeep.jackmidi import MidiPlayer
from stim.heart import Excitement

# See:
# https://soundprogramming.net/file-formats/general-midi-instrument-list/
# https://www.pgmusic.com/tutorial_gm.htm

DRUM_CHANNEL = 9
DRUM_BASS = 36
DRUM_HIGH_TOM = 50
DRUM_LOW_TOM = 45
DRUM_CLOSED_HIHAT = 42
DRUM_CRASH1 = 49
DRUM_SIDE_STICK = 37


class HeartSample(NamedTuple):
    # UNIX timestamp in nanoseconds
    time: int
    rate: float
    rr: tuple[float] = ()


class Player(MidiPlayer):
    def __init__(self, name: str):
        super().__init__(name)
        self.bpm = 0

    def drum(self, note: int, position: float, duration: float, velocity: int = 127):
        beat = 60 / self.bpm
        delay = beat * position
        self.play("note_on", velocity=velocity, note=note, channel=DRUM_CHANNEL, delay_sec=delay)
        self.play("note_off", note=note, channel=DRUM_CHANNEL, delay_sec=delay + beat * duration)

    def note(self, note: int, position: float, duration: float, velocity: int = 127):
        beat = 60 / self.bpm
        delay = beat * position
        self.play("note_on", velocity=velocity, note=note, channel=0, delay_sec=delay)
        self.play("note_off", note=note, channel=0, delay_sec=delay + beat * duration)

    def bank_program_select(self, channel: int, bank: int, program: int, position: int = 0):
        # https://www.sweetwater.com/sweetcare/articles/6-what-msb-lsb-refer-for-changing-banks-andprograms/
        beat = 60 / self.bpm
        delay = beat * position
        self.play("control_change", channel=channel, control=0, value=bank >> 8, delay_sec=delay)
        self.play("control_change", channel=channel, control=32, value=bank & 0xff, delay_sec=delay)
        self.play("program_change", channel=channel, program=program, delay_sec=delay)


class App:
    def __init__(self, args: argparse.Namespace):
        self.args = args
        self.player: MidiPlayer
        # self.heart = Heart(self.args.socket)
        self.heart = Excitement(quiet=False)
        self.shutting_down: bool = False
        self.beat_number: int = 0

    def shutdown(self):
        self.shutting_down = True
        self.heart.shutting_down = True

    async def composer(self):
        while not self.shutting_down:
            if self.heart.last_sample is None:
                await asyncio.sleep(0.2)
                continue
            self.beat_number += 1

            self.beat()

            await asyncio.sleep(60 / self.player.bpm)

        if self.stop_notes():
            await asyncio.sleep(60 / self.player.bpm)

    def beat(self):
        """
        Generate a beat and send it to the player
        """
        raise NotImplementedError()

    def stop_notes(self) -> bool:
        return False

    async def amain(self):
        # await asyncio.gather(self.heart.read_socket(), self.composer())
        await asyncio.gather(self.heart.read_socket(self.args.socket), self.composer())

    def aio_thread(self):
        asyncio.run(self.amain())

    def main(self):
        with Player("MIDIStim") as player:
            self.player = player
            aio_thread = threading.Thread(target=self.aio_thread, name="aio")
            aio_thread.start()
            try:
                while True:
                    cmd = input("> ")
                    if cmd.startswith("q"):
                        break
            except (EOFError, KeyboardInterrupt):
                pass
            finally:
                print("Shutting down...")
                self.shutdown()
                aio_thread.join()


class AudibleDrums(App):
    def beat(self):
        self.player.bpm = self.heart.last_sample.rate
        # print(self.heart.state)
        match self.heart.state:
            case "excite":
                self.player.drum(DRUM_LOW_TOM, 0, 1/4)
                self.player.drum(DRUM_CRASH1, 1/2, 1/4)
            case "climb":
                self.player.drum(DRUM_LOW_TOM, 0, 1/4)
                self.player.drum(DRUM_CLOSED_HIHAT, 1/2, 1/4)
            case "coast":
                self.player.drum(DRUM_LOW_TOM, 0, 1/4)
            case "fall":
                self.player.drum(DRUM_SIDE_STICK, 0, 1/4, velocity=64)
            case _:
                raise ValueError(f"unknown state {self.heart.state}")


class OnOff(App):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.silence_until_beat: int = 0

    def beat(self):
        self.player.bpm = 60
        # self.player.bpm = self.heart.last_sample.rate
        print(self.heart.state)
        if self.silence_until_beat > self.beat_number:
            print("silenced")
            return
        match self.heart.state:
            case "excite":
                self.player.play("note_off", note=64, channel=0)
                self.silence_until_beat = self.beat_number + 4
            case "climb":
                # self.player.play("note_on", note=64, channel=0, velocity=127)
                self.player.note(64, 0, 7/8)
            case "coast":
                self.player.note(64, 0, 1/8)
                self.player.note(64, 2/8, 1/8)
                self.player.note(64, 4/8, 1/8)
                self.player.note(64, 6/8, 1/8)
            case "fall":
                self.player.note(64, 0, 1/4)

        # self.player.bank_program_select(0, 8, 80)

    def stop_notes(self) -> bool:
        self.player.play("note_off", note=64, channel=0)  # , delay_sec=60 / self.player.bpm / 2)
        return True


def main():
    parser = argparse.ArgumentParser(description="Generate a drum pattern based on heart beat")
    parser.add_argument("socket", action="store", help="path to the socket to use to read heart beats")
    parser.add_argument("--drums", action="store_true",
                        help="play a drum loop")
    args = parser.parse_args()

    if args.drums:
        app = AudibleDrums(args)
    else:
        app = OnOff(args)
    app.main()


if __name__ == "__main__":
    sys.exit(main())
