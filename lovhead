#!/usr/bin/python3

import argparse
import logging
import math
import sys
import threading
from typing import Type

import numpy
import pylsl

import buttplug
import pyeep.app
from pyeep.app import Component, Hub, Message, Shutdown
from pyeep.gtk import Gtk
from stim import toy

# from stim.lovense_gtk import LovenseCommandLogView


log = logging.getLogger(__name__)


class SubthreadComponent(Component):
    HUB = "subthread"


class SubthreadHub(Hub):
    def __init__(self, **kwargs):
        kwargs.setdefault("name", "subthread")
        super().__init__(**kwargs)

    # TODO: shut down when Head is done


class Head(SubthreadComponent):
    # Sample rate = 52
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.thread = threading.Thread(name=self.name, target=self.run)
        self.mode = "center_zero"
        self.param_lock = threading.Lock()
        self.reference_roll: float | None = None
        self.reference_pitch: float | None = None
        self.control_angle = 45
        self.actuator: buttplug.client.client.Actuator | None = None
        self.shutting_down = False
        self.thread.start()

    def shutdown(self):
        super().shutdown()
        self.thread.join()

    def receive(self, msg: Message):
        match msg:
            case toy.NewDevice():
                # for a in msg.dev.actuators:
                # TODO: pick better than random
                self.actuator = msg.actuator.actuator
            case Shutdown():
                self.shutting_down = True

    def set_mode(self, mode: str):
        with self.param_lock:
            self.mode = mode

    def set_center(self):
        with self.param_lock:
            self.reference_roll = None
            self.reference_pitch = None

    def set_control_angle(self, value: int):
        with self.param_lock:
            self.control_angle = value

    def run(self):
        log.info("ACC: connecting to stream inlet")
        self.info = pylsl.resolve_stream('type', "ACC")[0]
        self.inlet = pylsl.StreamInlet(self.info)
        log.info("ACC: connected to stream inlet")

        while not self.shutting_down:
            samples, timestamps = self.inlet.pull_chunk(timeout=1, max_samples=8)
            data = numpy.array(samples, dtype=float)
            x = numpy.mean(data[:, 0])
            y = numpy.mean(data[:, 1])
            z = numpy.mean(data[:, 2])

            roll = math.atan2(y, z) / math.pi * 180
            pitch = math.atan2(-x, math.sqrt(y*y + z*z)) / math.pi * 180

            with self.param_lock:
                if self.reference_roll is None:
                    self.reference_roll = roll

                if self.reference_pitch is None:
                    self.reference_pitch = pitch

                # roll_angle = self.reference_roll - roll
                pitch_angle = self.reference_pitch - pitch
                match self.mode:
                    case "center_zero":
                        power = numpy.clip(abs(pitch_angle) * 2 / self.control_angle, 0, 1)
                    case "center_middle_increase_up":
                        power = numpy.clip(0.5 - pitch_angle * 2 / self.control_angle, 0, 1)
                    case "center_middle_increase_down":
                        power = numpy.clip(0.5 + pitch_angle * 2 / self.control_angle, 0, 1)
                    case "center_max":
                        power = numpy.clip(1 - abs(pitch_angle) * 2 / self.control_angle, 0, 1)
                    case _:
                        log.warning("Unknown mode %r", self.mode)
                        power = 0

                # print(f"POS {self.mode} {roll=:.1f} {roll_angle=:.1f} {pitch=:.1f} {pitch_angle=:.1f} {power=:.2f}")

            if self.actuator is not None:
                self.send(toy.SetPower(actuator=self.actuator, power=power))


class App(pyeep.gtk.GtkApp, pyeep.aio.AIOApp):
    def __init__(self, args: argparse.Namespace, title="Lovhead"):
        super().__init__(args, title=title)
        self.add_hub(SubthreadHub)
        self.add_component(toy.Toys, client_name=title, iface=args.iface)
        self.head = self.add_component(Head)

        zero_center = Gtk.RadioButton.new_with_label_from_widget(None, "Zero on center")
        zero_center.connect("toggled", self.set_mode, "center_zero")
        self.vbox.pack_start(zero_center, False, False, 0)

        mid_center_increase_up = Gtk.RadioButton.new_with_label_from_widget(
                zero_center, "Middle on center, up increases")
        mid_center_increase_up.connect("toggled", self.set_mode, "center_middle_increase_up")
        self.vbox.pack_start(mid_center_increase_up, False, False, 0)

        mid_center_increase_down = Gtk.RadioButton.new_with_label_from_widget(
                zero_center, "Middle on center, down increases")
        mid_center_increase_down.connect("toggled", self.set_mode, "center_middle_increase_down")
        self.vbox.pack_start(mid_center_increase_down, False, False, 0)

        max_center = Gtk.RadioButton.new_with_label_from_widget(zero_center, "Max on center")
        max_center.connect("toggled", self.set_mode, "center_max")
        self.vbox.pack_start(max_center, False, False, 0)

        self.control_angle = Gtk.Adjustment(
                value=self.head.control_angle, upper=180, step_increment=5, page_increment=10)
        self.control_angle_button = Gtk.SpinButton()
        self.control_angle_button.set_adjustment(self.control_angle)
        self.control_angle_button.connect("value-changed", self.on_control_angle_changed)
        self.vbox.pack_start(self.control_angle_button, False, False, 0)

        center = Gtk.Button.new_with_label("Recenter")
        center.connect("clicked", self.set_center)
        self.vbox.pack_start(center, True, True, 0)

        # self.log_toy = LovenseCommandLogView()
        # self.vbox.pack_start(self.log_toy, True, True, 0)

    def set_mode(self, button, mode: str):
        self.head.set_mode(mode)

    def set_center(self, button):
        self.head.set_center()

    def on_control_angle_changed(self, scroll):
        self.head.set_control_angle(self.control_angle.get_value())


def main():
    parser = App.argparser("Control toys with head movements")
    parser.add_argument("-i", "--iface", metavar="address", action="store", default="ws://127.0.0.1:12345",
                        help="Intiface Engine address to connect to")
    args = parser.parse_args()

    with App(args) as app:
        app.main()


if __name__ == "__main__":
    sys.exit(main())
