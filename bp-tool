#!/usr/bin/python3

import argparse
import logging
import sys

from pyeep.app import Shutdown
import pyeep.aio
from stim import toy

import buttplug


log = logging.getLogger(__name__)


async def dump_device(dev: buttplug.client.client.Device):
    print(f"# {dev.index} {dev.name}")

    for a in dev.actuators:
        print(f"* Actuator: {a.description} {a.__class__.__name__}")

    for a in dev.linear_actuators:
        print(f"* Linear actuator {a.description} {a.__class__.__name__}")

    for a in dev.rotatory_actuators:
        print(f"* Rotatory actuator: {a.description} {a.__class__.__name__}")

    for s in dev.sensors:
        value = await s.read()
        print(f"* Sensor: {s.description} {s.__class__.__name__}: {value}")


class Scan(pyeep.aio.AIOComponent):
    async def run(self):
        self.send(toy.ScanRequest(dst="toys"))

        while True:
            msg = await self.next_message(timeout=0.2)

            match msg:
                case Shutdown():
                    break
                case toy.NewDevice():
                    await dump_device(msg.actuator.actuator._device)


class Dump(pyeep.aio.AIOComponent):
    async def run(self):
        while True:
            msg = await self.next_message(timeout=0.2)

            match msg:
                case Shutdown():
                    break
                case toy.NewDevice():
                    await dump_device(msg.dev)
                case None:
                    self.send(Shutdown())
                    break


class App(pyeep.aio.AIOApp):
    def __init__(self, args: argparse.Namespace):
        super().__init__(args)
        self.add_component(toy.Toys, client_name="bp-tool", iface=args.iface)
        if self.args.scan:
            self.add_component(Scan)
        elif self.args.dump:
            self.add_component(Dump)


def main():
    parser = App.argparser("Basic buttplug device management")
    parser.add_argument("-i", "--iface", metavar="address", action="store", default="ws://127.0.0.1:12345",
                        help="Intiface Engine address to connect to")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("--scan", action="store_true",
                       help="Scan for devices")
    group.add_argument("--dump", action="store_true",
                       help="Dump information about connected devices")
    args = parser.parse_args()

    with App(args) as app:
        app.main()


if __name__ == "__main__":
    sys.exit(main())
