#!/usr/bin/python3

# From https://github.com/hbldh/bleak/tree/develop/examples: enable_notifications.py
# Useful links:
# https://wiki.st.com/stm32mcu/wiki/Connectivity:STM32WB_HeartRate
import argparse
import asyncio
import logging
import sys
import time
from pathlib import Path

import pyeep.app
from stim.heart import Excitement
from stim.lovense import Lovense

log = logging.getLogger(__name__)

BATTERY_LEVEL_UUID = "00002a19-0000-1000-8000-00805f9b34fb"
MAC = "D9:7E:F0:C7:A9:A5"


class App(pyeep.app.App):
    def __init__(self, args: argparse.Namespace):
        super().__init__(args)
        # self.heart = Heart(self.args.socket)
        self.heart = Excitement(quiet=False)
        self.heart.on_sample = self.on_heart_sample
        self.beat_number: int = 0
        self.lovense: Lovense
        self.silence_until: float = 0.0

    def shutdown(self):
        super().shutdown()
        self.heart.shutdown()
        self.lovense.shutting_down = True

    def on_heart_sample(self):
        now = time.time()
        if now < self.silence_until:
            self.lovense.pattern_queue.append(0)
            print(self.heart.state, "silenced")
            return

        print(self.heart.state)
        match self.heart.state:
            case "excite":
                for i in range(int(self.lovense.sample_rate)):
                    self.lovense.pattern_queue.append(20)
                self.lovense.pattern_queue.append(0)
                self.silence_until = now + 4
            case "climb":
                self.lovense.pattern_queue.append(15)
            case "coast":
                self.lovense.pattern_queue.append(12)
            case "fall":
                self.lovense.pattern_queue.append(8)
            case _:
                raise ValueError(f"unknown state {self.heart.state}")

    def beat(self):
        """
        Generate a beat and send it to the player
        """
        raise NotImplementedError()

    def stop_notes(self) -> bool:
        return False

    async def aio_main(self):
        # async with HeartRateMonitor(addr=MAC) as monitor:
        # characteristic 45440002-0023-4bd4-bbd5-a6920e4c5653 Unknown 12 (0 descriptors)
        # characteristic 45440003-0023-4bd4-bbd5-a6920e4c5653 Unknown 14 (1 descriptors)
        async with Lovense(conf=Path(self.args.toy)) as dev:
            # print(f"Battery level: {await dev.read_battery_level()}%")
            await dev.start()
            await dev.send_command("Vibrate:0;")
            self.lovense = dev

            await asyncio.gather(
                self.heart.read_socket(self.args.socket),
                dev.play_pattern(),
            )

    def ui_main(self):
        try:
            while not self.shutting_down:
                cmd = input("> ")
                if cmd.startswith("q"):
                    break
        except EOFError:
            pass


def main():
    parser = App.argparser("Edging using a Lovense toy and a heart frequency monitor")
    parser.add_argument("toy", metavar="file.json", action="store", help="toy description to use to connect")
    parser.add_argument("socket", action="store", help="path to the socket to use to read heart beats")
    args = parser.parse_args()

    with App(args) as app:
        app.main()


if __name__ == "__main__":
    sys.exit(main())
