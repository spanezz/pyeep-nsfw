#!/usr/bin/python3

# From https://github.com/hbldh/bleak/tree/develop/examples: enable_notifications.py
# Useful links:
# https://wiki.st.com/stm32mcu/wiki/Connectivity:STM32WB_HeartRate

import argparse
import asyncio
import datetime
import json
import logging
import shutil
import sys
import time
from collections import deque
from typing import NamedTuple, Optional

from bleak import BleakClient, BleakScanner
from bleak.backends.characteristic import BleakGATTCharacteristic
from bleak.backends.device import BLEDevice

try:
    import coloredlogs
    HAVE_COLOREDLOGS = True
except ModuleNotFoundError:
    HAVE_COLOREDLOGS = False


log = logging.getLogger(__name__)

MAC = "CD:E3:36:F6:BB:74"
HEART_RATE_UUID = "00002a37-0000-1000-8000-00805f9b34fb"
BATTERY_LEVEL_UUID = "00002a19-0000-1000-8000-00805f9b34fb"


class Sample(NamedTuple):
    # UNIX timestamp in nanoseconds
    time: int
    rate: int
    rr: tuple[float] = ()


class Reporter:
    def __init__(self):
        self.columns, self.lines = shutil.get_terminal_size()

    def add(self, sample: Sample):
        self.history.append(sample)


class HeartRateMonitor:
    """
    Monitor a Bluetooth LE heart rate monitor
    """
    def __init__(
            self, addr: str, sensor_uuid: str = HEART_RATE_UUID, history_size: int = 3600,
            load_from: Optional[str] = None):
        self.addr = addr
        self.sensor_uuid = sensor_uuid
        self.history_size = history_size
        self.history: deque[Sample] = deque(maxlen=history_size)
        self.disconnected_event = asyncio.Event()
        self.device: BLEDevice
        self.client: BleakClient
        if load_from is not None:
            self.load(load_from)

    async def wait_until_disconnected(self):
        await self.disconnected_event.wait()

    def load(self, pathname: str):
        try:
            with open(pathname, "rt") as fd:
                for line in fd:
                    self.history.append(Sample(*json.loads(line)))
        except FileNotFoundError:
            pass

    def save(self, pathname: str):
        with open(pathname, "wt") as fd:
            for sample in self.history:
                print(json.dumps(sample), file=fd)

    async def __aenter__(self):
        log.info("looking for device...")
        device = await BleakScanner.find_device_by_address(self.addr)
        if device is None:
            raise RuntimeError(f"could not find device with address {self.addr}")
        self.device = device

        log.info("connecting to device...")
        self.client = BleakClient(
            self.device,
            disconnected_callback=self.on_disconnect,
        )
        await self.client.__aenter__()
        log.info("Connected")

        return self

    async def __aexit__(self, exc_type, exc, tb):
        await self.stop()
        await self.client.__aexit__(exc_type, exc, tb)

    async def start(self):
        await self.client.start_notify(self.sensor_uuid, self.on_heart_rate)

    async def stop(self):
        await self.client.stop_notify(self.sensor_uuid)

    def print_device_info(self):
        for service in self.client.services:
            print(f"service {service.uuid}")
            for c in service.characteristics:
                print(f"  characteristic {c.uuid} {c.description} {c.handle} ({len(c.descriptors)} descriptors)")

    async def read_battery_level(self) -> int:
        level = await self.client.read_gatt_char(BATTERY_LEVEL_UUID)
        return int(level[0])

    def _add_nan(self):
        sample = Sample(time=time.time_ns(), rate=float("nan"))
        self.history.append(sample)

    def on_disconnect(self, client: BleakClient):
        """
        Called when client disconnects
        """
        print("Disconnected")
        self._add_nan()
        self.disconnected_event.set()

    def on_heart_rate(self, characteristic: BleakGATTCharacteristic, data: bytearray):
        """
        Decode heart rate information
        """
        # From https://github.com/fg1/BLEHeartRateLogger
        # See https://www.mariam.qa/post/hr-ble/
        # RR intervals are the intervals in milliseconds between heart beats:
        # see https://help.elitehrv.com/article/67-what-are-r-r-intervals
        log.info("%s: %r", characteristic.description, data)

        byte0 = data[0]
        hrv_uint8 = (byte0 & 1) == 0

        # sensor_contact = (byte0 >> 1) & 3
        # if sensor_contact == 2:
        #     res["sensor_contact"] = "No contact detected"
        # elif sensor_contact == 3:
        #     res["sensor_contact"] = "Contact detected"
        # else:
        #     res["sensor_contact"] = "Sensor contact not supported"

        # Energy expended present
        have_ee = ((byte0 >> 3) & 1) == 1

        # RR intervals present
        have_rr = ((byte0 >> 4) & 1) == 1

        if hrv_uint8:
            hr = data[1]
            i = 2
        else:
            hr = (data[2] << 8) | data[1]
            i = 3

        if have_ee:
            # ee = (data[i + 1] << 8) | data[i]
            i += 2

        rr = []
        if have_rr:
            while i < len(data):
                # Note: Need to divide the value by 1024 to get in seconds
                rr_val = (data[i + 1] << 8) | data[i]
                rr.append(rr_val / 1024)
                i += 2

        sample = Sample(time=time.time_ns(), rate=hr, rr=tuple(rr))
        self.history.append(sample)
        self.on_sample(sample)

    def on_sample(self, sample: Sample):
        """
        Override to do something with samples
        """
        print(sample)


class HeartRatePlot(HeartRateMonitor):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        import matplotlib.pyplot as plt

        with plt.ion():
            self.figure, self.ax = plt.subplots(figsize=(8, 6))
            self.plot, = self.ax.plot([0] * self.history_size)

    async def stop(self):
        await super().stop()
        self.figure.close()

    def on_sample(self, sample: Sample):
        dt = datetime.datetime.fromtimestamp(sample.time/1000_000_000)
        line = f"{dt:%Y-%m-%d %H:%M:%S} {sample.rate}bpm {[int(rr * 1000) for rr in sample.rr]}"
        print(f"\r{line.ljust(60)}", end="")

        import matplotlib.pyplot as plt
        import numpy
        with plt.ion():
            if self.history:
                latest_time = self.history[-1].time
                earliest_time = (self.history[0].time - latest_time) / (60 * 1000_000_000)
                x_data = numpy.fromiter(
                        ((x.time - latest_time) / (60 * 1000_000_000) for x in self.history), dtype=float)
            else:
                earliest_time = 0

            y_data = numpy.fromiter((x.rate for x in self.history), dtype=float)
            if self.history:
                self.ax.set_xlim([earliest_time, 0])
                self.ax.set_ylim([0, numpy.nanmax(y_data)])

            if len(self.history) < self.history_size:
                x_lpad = numpy.full(self.history_size - len(self.history), earliest_time, dtype=float)
                y_lpad = numpy.zeros(self.history_size - len(self.history), dtype=float)
                if y_data.size:
                    x_data = numpy.concatenate((x_lpad, x_data))
                    y_data = numpy.concatenate((y_lpad, y_data))
                else:
                    x_data = x_lpad
                    y_data = y_lpad

            self.plot.set_xdata(x_data)
            self.plot.set_ydata(y_data)
            self.figure.canvas.draw()
            self.figure.canvas.flush_events()


async def aio_main():
    log.info("starting scan...")

    savefile = "heartrate-history.jsonl"

    interrupted = False
    while not interrupted:
        try:
            # async with HeartRateMonitor(addr=MAC) as monitor:
            async with HeartRatePlot(addr=MAC, load_from=savefile) as monitor:
                monitor.print_device_info()
                print(f"Battery level: {await monitor.read_battery_level()}%")
                await monitor.start()
                try:
                    await monitor.wait_until_disconnected()
                    print("Not connected")
                finally:
                    monitor._add_nan()
                    monitor.save(savefile)
        except KeyboardInterrupt:
            interrupted = True
        except Exception:
            pass


def main():
    parser = argparse.ArgumentParser(description="Read TLE heart rate sensor")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="verbose output")
    parser.add_argument("--debug", action="store_true",
                        help="verbose output")

    args = parser.parse_args()

    FORMAT = "%(asctime)-15s %(levelname)s %(name)s %(message)s"
    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARN

    if coloredlogs is not None:
        coloredlogs.install(level=log_level, fmt=FORMAT)
    else:
        logging.basicConfig(level=log_level, stream=sys.stderr, format=FORMAT)

    return asyncio.run(aio_main())


if __name__ == "__main__":
    sys.exit(main())
