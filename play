#!/usr/bin/python3

import argparse
import importlib
import logging
import pkgutil
import sys
from typing import Type

import pyeep.aio
import pyeep.app
import pyeep.evdev
import pyeep.gtk
import pyeep.inputs
import pyeep.pygame
from pyeep.gtk import Gio, GLib, Gtk
from stim import joystick, keyboards, scenes, happylights
from stim.buttplug import ButtplugClient, ScanAction
from stim.muse2 import HeadMovement, HeadPosition
from stim.output import NewOutput, NullOutput, OutputsModel

log = logging.getLogger(__name__)


class App(pyeep.gtk.GtkApp, pyeep.aio.AIOApp):
    def __init__(self, args: argparse.Namespace, **kwargs):
        super().__init__(args, **kwargs)
        self.add_hub(pyeep.pygame.PygameHub)
        self.outputs = self.add_component(OutputsModel)
        self.inputs: list[pyeep.inputs.Input] = []

        self.add_component(ButtplugClient, client_name=self.title, iface=args.iface)
        self.add_component(HeadPosition)
        self.add_component(HeadMovement)
        self.add_component(joystick.Joysticks)
        self.add_component(pyeep.evdev.EvdevDeviceManager, device_map={
            "usb-04d9_1203-event-kbd": keyboards.CNCControlPanel,
            "bluetooth-40:28:c6:3f:39:91:1b-kbd": keyboards.PageTurner,
        })
        null_output = self.add_component(NullOutput, name="null_output")
        self.send(NewOutput(output=null_output))
        lights = self.add_component(happylights.HappyLights, address="21:04:99:10:35:05")
        self.send(NewOutput(output=lights))

    def setup_logging(self):
        super().setup_logging()
        if self.args.debug:
            logging.getLogger("bleak.backends.bluezdbus.manager").setLevel(logging.INFO)

    def _add_input_ui(self, input: pyeep.inputs.Input):
        input_controller = self.add_component(input.get_input_controller(), input=input)
        self.inputs_box.append(input_controller.widget)

    def _add_input(self, input: pyeep.inputs.Input):
        # TODO: also remove on remove_component
        self.inputs.append(input)
        if hasattr(self, "inputs_box"):
            self._add_input_ui(input)

    def add_component(self, component_cls: Type[pyeep.app.Component], **kwargs) -> pyeep.app.Component:
        component = super().add_component(component_cls, **kwargs)
        if isinstance(component, pyeep.inputs.Input):
            GLib.idle_add(self._add_input, component)
        return component

    def build_main_window(self):
        super().build_main_window()

        self.grid = Gtk.Grid()
        self.grid.set_column_homogeneous(True)
        self.window.set_child(self.grid)

        self.frame_inputs = Gtk.Frame(label="Inputs")
        self.frame_inputs.set_vexpand(True)
        self.inputs_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.frame_inputs.set_child(self.inputs_box)
        for inp in self.inputs:
            self._add_input_ui(inp)

        self.frame_scenes = Gtk.Frame(label="Scenes")
        self.frame_scenes.set_vexpand(True)
        self.scenes_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.frame_scenes.set_child(self.scenes_box)

        self.grid.attach(self.frame_inputs, 0, 0, 1, 1)
        self.grid.attach(self.frame_scenes, 1, 0, 1, 1)
        self.grid.attach(self.outputs.widget, 2, 0, 1, 1)

        # Instantiate scenes
        for importer, modname, ispkg in pkgutil.iter_modules(scenes.__path__, "stim.scenes."):
            importlib.import_module(modname)
        for scene_cls in scenes.base.SCENES:
            scene = self.add_component(scene_cls)
            self.scenes_box.append(scene.widget)

        self.add_component(ScanAction)

        devices_menu = Gio.Menu()
        devices_menu.append("Device scan", "app.buttplug-scan")

        menu = pyeep.gtk.Gio.Menu()
        menu.append_submenu("Devices", devices_menu)
        self.gtk_app.set_menubar(menu)
        self.window.set_show_menubar(True)

    def ui_main(self):
        self.head.start()
        super().ui_main()


def main():
    parser = App.argparser("Play with nonconventional inputs and outputs")
    parser.add_argument("-i", "--iface", metavar="address", action="store", default="ws://127.0.0.1:12345",
                        help="Intiface Engine address to connect to")
    args = parser.parse_args()

    with App(args, title="Player", application_id="org.enricozini.play") as app:
        app.main()


if __name__ == "__main__":
    sys.exit(main())
