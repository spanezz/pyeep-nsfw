#!/usr/bin/python3

import argparse
import importlib
import logging
import pkgutil
import sys

import pyeep.aio
import pyeep.app
import pyeep.gtk
from pyeep.gtk import Gtk, Gio
from stim import cnc, scenes
from stim.output import NullOutput, NewOutput, OutputsView
from stim.buttplug import ButtplugClient, ScanAction
from stim.muse2 import HeadPosition, HeadMovement

log = logging.getLogger(__name__)


class App(pyeep.gtk.GtkApp, pyeep.aio.AIOApp):
    def __init__(self, args: argparse.Namespace, **kwargs):
        super().__init__(args, **kwargs)
        self.outputs = self.add_component(OutputsView)

        self.add_component(ButtplugClient, client_name=self.title, iface=args.iface)
        self.add_component(cnc.CncReceiver)
        self.add_component(HeadPosition)
        self.add_component(HeadMovement)
        null_output = self.add_component(NullOutput, name="null_output")
        self.send(NewOutput(output=null_output))

    def build_main_window(self):
        super().build_main_window()

        self.grid = Gtk.Grid()
        self.grid.set_column_homogeneous(True)
        self.window.set_child(self.grid)

        self.frame_inputs = Gtk.Frame(label="Inputs")

        self.frame_scenes = Gtk.Frame(label="Scenes")
        self.scenes_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL)
        self.frame_scenes.set_child(self.scenes_box)

        self.frame_log = Gtk.Frame(label="Log")
        self.frame_log.set_child(self.logview)
        self.logview.set_vexpand(True)

        self.grid.attach(self.frame_inputs, 0, 0, 1, 2)
        self.grid.attach(self.frame_scenes, 1, 0, 1, 1)
        self.grid.attach(self.outputs, 2, 0, 1, 2)
        self.grid.attach(self.frame_log, 1, 1, 1, 1)

        # Instantiate scenes
        for importer, modname, ispkg in pkgutil.iter_modules(scenes.__path__, "stim.scenes."):
            importlib.import_module(modname)
        for scene_cls in scenes.base.SCENES:
            self.scenes_box.append(self.add_component(scene_cls))

        scan_action = self.add_component(ScanAction)
        self.gtk_app.add_action(scan_action.action)

        devices_menu = Gio.Menu()
        devices_menu.append("Device scan", "app.buttplug_scan")

        menu = pyeep.gtk.Gio.Menu()
        menu.append_submenu("Devices", devices_menu)
        self.gtk_app.set_menubar(menu)
        self.window.set_show_menubar(True)

    def ui_main(self):
        self.head.start()
        super().ui_main()


def main():
    parser = App.argparser("Play with nonconventional inputs and outputs")
    parser.add_argument("-i", "--iface", metavar="address", action="store", default="ws://127.0.0.1:12345",
                        help="Intiface Engine address to connect to")
    args = parser.parse_args()

    with App(args, title="Player", application_id="org.enricozini.play") as app:
        app.main()


if __name__ == "__main__":
    sys.exit(main())
